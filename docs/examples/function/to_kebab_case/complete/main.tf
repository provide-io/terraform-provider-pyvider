terraform {
  required_providers {
    pyvider = {
      source  = "local/providers/pyvider"
      version = ">= 0.0.5"
    }
  }
}

provider "pyvider" {
  # Provider configuration
  # Add your configuration options here
}

# Generated by Plating - Executable Example
# === Case_Conversion Example ===

# Case conversion function examples

# Basic case conversion examples
locals {
  original_texts = [
    "user_profile_settings",
    "APIEndpointHandler",
    "database-connection-pool",
    "My Application Title",
    "SYSTEM_CONFIG_VALUE"
  ]

  # Convert to snake_case
  snake_case_results = [
    for text in local.original_texts :
    provider::pyvider::to_snake_case(text)
  ]
  # Results: ["user_profile_settings", "api_endpoint_handler", "database_connection_pool", "my_application_title", "system_config_value"]

  # Convert to camelCase
  camel_case_results = [
    for text in local.original_texts :
    provider::pyvider::to_camel_case(text)
  ]
  # Results: ["userProfileSettings", "apiEndpointHandler", "databaseConnectionPool", "myApplicationTitle", "systemConfigValue"]

  # Convert to PascalCase
  pascal_case_results = [
    for text in local.original_texts :
    provider::pyvider::to_camel_case(text, true)
  ]
  # Results: ["UserProfileSettings", "ApiEndpointHandler", "DatabaseConnectionPool", "MyApplicationTitle", "SystemConfigValue"]

  # Convert to kebab-case
  kebab_case_results = [
    for text in local.original_texts :
    provider::pyvider::to_kebab_case(text)
  ]
  # Results: ["user-profile-settings", "api-endpoint-handler", "database-connection-pool", "my-application-title", "system-config-value"]
}

# Database to API field mapping
variable "database_fields" {
  type = list(string)
  default = [
    "user_id",
    "first_name",
    "last_name",
    "email_address",
    "phone_number",
    "created_at",
    "updated_at",
    "is_active",
    "last_login_time"
  ]
}

locals {
  # Create API field mappings
  api_field_mapping = {
    for field in var.database_fields :
    field => provider::pyvider::to_camel_case(field)
  }

  # Generate JavaScript object
  js_object_fields = [
    for db_field, api_field in local.api_field_mapping :
    "  ${api_field}: data.${db_field}"
  ]

  js_mapping_code = "const apiResponse = {\n${join(",\n", local.js_object_fields)}\n};"
}

# URL slug generation
variable "page_titles" {
  type = list(string)
  default = [
    "Getting Started with Terraform",
    "Advanced Provider Development Guide",
    "Best Practices & Common Patterns",
    "Troubleshooting Configuration Issues",
    "API Reference Documentation"
  ]
}

locals {
  # Generate URL-friendly slugs
  url_slugs = {
    for title in var.page_titles :
    title => provider::pyvider::to_kebab_case(title)
  }

  # Create navigation links
  navigation_links = [
    for title, slug in local.url_slugs :
    {
      title = title
      slug = slug
      url = "/docs/${slug}"
    }
  ]
}

# CSS class generation
variable "ui_components" {
  type = list(object({
    name = string
    type = string
  }))
  default = [
    { name = "userProfileCard", type = "component" },
    { name = "navigationMenubar", type = "layout" },
    { name = "searchInputField", type = "form" },
    { name = "dataTableContainer", type = "container" },
    { name = "modalDialogWindow", type = "overlay" }
  ]
}

locals {
  # Generate CSS classes
  css_classes = {
    for component in var.ui_components :
    component.name => {
      class_name = provider::pyvider::to_kebab_case(component.name)
      full_class = "${provider::pyvider::to_kebab_case(component.type)}-${provider::pyvider::to_kebab_case(component.name)}"
      type = component.type
    }
  }
}

# Configuration key normalization
variable "app_settings" {
  type = map(any)
  default = {
    "Database Host" = "localhost"
    "API Base URL" = "https://api.example.com"
    "Cache Timeout (seconds)" = 300
    "Debug Mode Enabled" = false
    "Max Connection Pool Size" = 20
  }
}

locals {
  # Normalize to different naming conventions
  snake_case_config = {
    for display_name, value in var.app_settings :
    provider::pyvider::to_snake_case(display_name) => value
  }

  camel_case_config = {
    for display_name, value in var.app_settings :
    provider::pyvider::to_camel_case(display_name) => value
  }

  kebab_case_config = {
    for display_name, value in var.app_settings :
    provider::pyvider::to_kebab_case(display_name) => value
  }
}

# File naming patterns
variable "document_info" {
  type = list(object({
    title = string
    category = string
    version = string
  }))
  default = [
    {
      title = "User Manual"
      category = "Documentation"
      version = "2.1"
    },
    {
      title = "API Reference Guide"
      category = "Technical Documentation"
      version = "1.0"
    },
    {
      title = "Installation Instructions"
      category = "Setup Guide"
      version = "3.2"
    }
  ]
}

locals {
  # Generate various filename patterns
  document_files = [
    for doc in var.document_info : {
      # Snake case filename
      snake_file = "${provider::pyvider::to_snake_case(doc.title)}_v${replace(doc.version, ".", "_")}.md"

      # Kebab case filename
      kebab_file = "${provider::pyvider::to_kebab_case(doc.title)}-v${replace(doc.version, ".", "-")}.html"

      # Category-based organization
      category_path = "${provider::pyvider::to_snake_case(doc.category)}/${provider::pyvider::to_kebab_case(doc.title)}"

      original = doc
    }
  ]
}

# Environment variable generation
variable "service_config" {
  type = map(string)
  default = {
    "Database Connection String" = "postgresql://localhost:5432/mydb"
    "Redis Cache URL" = "redis://localhost:6379"
    "API Service Port" = "8080"
    "Log Level Setting" = "INFO"
    "JWT Secret Key" = "your-secret-key"
  }
}

locals {
  # Convert to environment variable format (UPPER_SNAKE_CASE)
  env_variables = {
    for config_name, value in var.service_config :
    provider::pyvider::upper(provider::pyvider::to_snake_case(config_name)) => value
  }

  # Generate .env file content
  env_file_lines = [
    for env_name, value in local.env_variables :
    "${env_name}=${value}"
  ]
}

# Create output files
resource "pyvider_file_content" "case_conversion_examples" {
  filename = "/tmp/case_conversion_examples.txt"
  content = join("\n", [
    "=== Case Conversion Examples ===",
    "",
    "Original texts:",
    join("\n", [for i, text in local.original_texts : "  ${i + 1}. ${text}"]),
    "",
    "Snake case results:",
    join("\n", [for i, result in local.snake_case_results : "  ${i + 1}. ${result}"]),
    "",
    "Camel case results:",
    join("\n", [for i, result in local.camel_case_results : "  ${i + 1}. ${result}"]),
    "",
    "Pascal case results:",
    join("\n", [for i, result in local.pascal_case_results : "  ${i + 1}. ${result}"]),
    "",
    "Kebab case results:",
    join("\n", [for i, result in local.kebab_case_results : "  ${i + 1}. ${result}"])
  ])
}

resource "pyvider_file_content" "javascript_mapping" {
  filename = "/tmp/api_field_mapping.js"
  content = join("\n", [
    "// Database to API field mapping",
    "// Generated from Terraform configuration",
    "",
    local.js_mapping_code,
    "",
    "// Field mapping reference:",
    join("\n", [
      for db_field, api_field in local.api_field_mapping :
      "// ${db_field} -> ${api_field}"
    ])
  ])
}

resource "pyvider_file_content" "css_classes" {
  filename = "/tmp/component_styles.css"
  content = join("\n", concat(
    ["/* Component CSS Classes */", "/* Generated from UI component definitions */", ""],
    flatten([
      for component_name, info in local.css_classes : [
        "/* ${component_name} (${info.type}) */",
        ".${info.class_name} {",
        "  /* Component styles for ${component_name} */",
        "}",
        "",
        ".${info.full_class} {",
        "  /* Specific ${info.type} styles for ${component_name} */",
        "}",
        ""
      ]
    ])
  ))
}

resource "pyvider_file_content" "navigation_config" {
  filename = "/tmp/navigation.json"
  content = jsonencode({
    title = "Documentation Navigation"
    links = local.navigation_links
    url_mapping = local.url_slugs
  })
}

resource "pyvider_file_content" "config_files" {
  filename = "/tmp/multi_format_config.json"
  content = jsonencode({
    snake_case = local.snake_case_config
    camelCase = local.camel_case_config
    "kebab-case" = local.kebab_case_config
  })
}

resource "pyvider_file_content" "environment_variables" {
  filename = "/tmp/service.env"
  content = join("\n", concat(
    ["# Service Environment Variables", "# Generated from configuration"],
    local.env_file_lines
  ))
}

# Output conversion results
output "case_conversion_results" {
  value = {
    conversion_examples = {
      original = local.original_texts
      snake_case = local.snake_case_results
      camel_case = local.camel_case_results
      pascal_case = local.pascal_case_results
      kebab_case = local.kebab_case_results
    }

    api_mapping = {
      total_fields = length(var.database_fields)
      field_mapping = local.api_field_mapping
      js_file = pyvider_file_content.javascript_mapping.filename
    }

    web_assets = {
      navigation_links = length(local.navigation_links)
      css_classes = length(local.css_classes)
      navigation_file = pyvider_file_content.navigation_config.filename
      css_file = pyvider_file_content.css_classes.filename
    }

    configuration = {
      formats_generated = 3
      config_file = pyvider_file_content.config_files.filename
      env_file = pyvider_file_content.environment_variables.filename
      env_variables = length(local.env_variables)
    }

    file_patterns = {
      documents_processed = length(local.document_files)
      pattern_examples = [for doc in local.document_files : {
        snake_file = doc.snake_file
        kebab_file = doc.kebab_file
        category_path = doc.category_path
      }]
    }
  }
}


# === Basic Example ===

# Basic string manipulation function examples

# Case conversion examples
locals {
  original_text = "Hello World"

  uppercase_text = provider::pyvider::upper(local.original_text)    # Returns: "HELLO WORLD"
  lowercase_text = provider::pyvider::lower(local.original_text)    # Returns: "hello world"
}

# String formatting examples
locals {
  template_string = "Hello, {name}! You have {count} messages."

  formatted_message = provider::pyvider::format(local.template_string, {
    name = "Alice"
    count = 5
  })  # Returns: "Hello, Alice! You have 5 messages."

  # Simple template
  simple_format = provider::pyvider::format("User: {user}", {
    user = "admin"
  })  # Returns: "User: admin"
}

# String joining examples
locals {
  word_list = ["apple", "banana", "cherry"]

  comma_separated = provider::pyvider::join(local.word_list, ", ")     # Returns: "apple, banana, cherry"
  pipe_separated = provider::pyvider::join(local.word_list, " | ")     # Returns: "apple | banana | cherry"
  no_separator = provider::pyvider::join(local.word_list, "")          # Returns: "applebananacherry"
}

# String splitting examples
locals {
  csv_data = "apple,banana,cherry,date"

  split_by_comma = provider::pyvider::split(local.csv_data, ",")       # Returns: ["apple", "banana", "cherry", "date"]

  # Split with limit
  path_string = "/home/user/documents/file.txt"
  split_path = provider::pyvider::split(local.path_string, "/")        # Returns: ["", "home", "user", "documents", "file.txt"]
}

# String replacement examples
locals {
  original_text = "The quick brown fox jumps over the lazy dog"

  replace_fox = provider::pyvider::replace(local.original_text, "fox", "cat")    # Returns: "The quick brown cat jumps over the lazy dog"
  replace_spaces = provider::pyvider::replace(local.original_text, " ", "_")     # Returns: "The_quick_brown_fox_jumps_over_the_lazy_dog"
}

# Combined string operations
locals {
  user_input = "  MiXeD cAsE tExT  "

  # Clean and normalize user input
  cleaned_input = provider::pyvider::lower(
    provider::pyvider::replace(
      provider::pyvider::replace(user_input, "  ", " "),  # Remove extra spaces
      " ", "_"                                            # Replace remaining spaces with underscores
    )
  )  # Returns: "mixed_case_text"

  # Create a filename from user input
  filename = provider::pyvider::format("{base}.{ext}", {
    base = local.cleaned_input
    ext = "txt"
  })  # Returns: "mixed_case_text.txt"
}

# Output results for verification
output "string_manipulation_examples" {
  value = {
    case_conversion = {
      original = local.original_text
      uppercase = local.uppercase_text
      lowercase = local.lowercase_text
    }

    formatting = {
      template = local.template_string
      formatted = local.formatted_message
      simple = local.simple_format
    }

    joining = {
      words = local.word_list
      comma_separated = local.comma_separated
      pipe_separated = local.pipe_separated
      no_separator = local.no_separator
    }

    splitting = {
      csv_original = local.csv_data
      csv_split = local.split_by_comma
      path_original = local.path_string
      path_split = local.split_path
    }

    replacement = {
      original = local.original_text
      fox_to_cat = local.replace_fox
      spaces_to_underscores = local.replace_spaces
    }

    combined_operations = {
      user_input = user_input
      cleaned = local.cleaned_input
      filename = local.filename
    }
  }
}


# === Example Example ===

# String manipulation function examples

# Example 1: Convert text to uppercase
locals {
  greeting = "hello world!"
  upper_greeting = provider::pyvider::upper(local.greeting)
}

# Example 2: Convert environment variable to lowercase
data "pyvider_env_variables" "user_info" {
  keys = ["USER"]
}

locals {
  username_lower = provider::pyvider::lower(
    lookup(data.pyvider_env_variables.user_info.values, "USER", "unknown")
  )
}

# Example 3: Format strings with placeholders
locals {
  app_name = "MyApp"
  version = "1.2.3"
  formatted_title = provider::pyvider::format(
    "%s v%s - Environment: %s",
    local.app_name,
    local.version,
    "production"
  )
}

# Example 4: Replace text patterns
locals {
  config_template = "database_host=REPLACE_HOST;database_port=REPLACE_PORT"
  database_config = provider::pyvider::replace(
    provider::pyvider::replace(
      local.config_template,
      "REPLACE_HOST",
      "localhost"
    ),
    "REPLACE_PORT",
    "5432"
  )
}

# Example 5: Split and join strings
locals {
  csv_data = "apple,banana,cherry,date"
  fruits = provider::pyvider::split(local.csv_data, ",")
  fruits_with_and = provider::pyvider::join(local.fruits, " and ")
}

# Example 6: Complex string processing pipeline
locals {
  user_input = "  Hello, World!  "
  processed_input = provider::pyvider::upper(
    provider::pyvider::replace(
      provider::pyvider::replace(local.user_input, " ", "_"),
      ",",
      ""
    )
  )
}

# Create a file demonstrating all string functions
resource "pyvider_file_content" "string_examples" {
  filename = "/tmp/string_function_examples.txt"
  content = join("\n", [
    "=== String Manipulation Examples ===",
    "",
    "Original greeting: '${local.greeting}'",
    "Uppercase greeting: '${local.upper_greeting}'",
    "",
    "Username (lowercase): '${local.username_lower}'",
    "",
    "Formatted title: '${local.formatted_title}'",
    "",
    "Database config: '${local.database_config}'",
    "",
    "Original CSV: '${local.csv_data}'",
    "Split into fruits: ${jsonencode(local.fruits)}",
    "Joined with 'and': '${local.fruits_with_and}'",
    "",
    "User input: '${local.user_input}'",
    "Processed: '${local.processed_input}'",
    "",
    "Generated at: ${timestamp()}"
  ])
}

output "string_function_results" {
  description = "Results of various string manipulation functions"
  value = {
    upper_example = local.upper_greeting
    lower_example = local.username_lower
    format_example = local.formatted_title
    replace_example = local.database_config
    split_example = local.fruits
    join_example = local.fruits_with_and
    pipeline_example = local.processed_input
    examples_file = pyvider_file_content.string_examples.filename
  }
}


# === Text_Processing Example ===

# Text processing examples using string manipulation functions

# Configuration file processing
variable "config_template" {
  type    = string
  default = "server_name: {hostname}\nport: {port}\ndebug: {debug_mode}\nlog_level: {level}"
}

variable "server_config" {
  type = object({
    hostname   = string
    port       = number
    debug_mode = bool
    level      = string
  })
  default = {
    hostname   = "web-server-01"
    port       = 8080
    debug_mode = true
    level      = "INFO"
  }
}

locals {
  # Generate configuration content
  config_content = provider::pyvider::format(var.config_template, {
    hostname   = var.server_config.hostname
    port       = var.server_config.port
    debug_mode = var.server_config.debug_mode
    level      = provider::pyvider::upper(var.server_config.level)
  })

  # Create normalized filename from hostname
  config_filename = provider::pyvider::format("{name}_config.yaml", {
    name = provider::pyvider::lower(
      provider::pyvider::replace(var.server_config.hostname, "-", "_")
    )
  })
}

# Log file path generation
variable "log_entries" {
  type = list(string)
  default = [
    "2024-01-15 10:30:15 INFO Application started",
    "2024-01-15 10:30:16 DEBUG Database connection established",
    "2024-01-15 10:30:17 WARN Cache miss for key: user_123",
    "2024-01-15 10:30:18 ERROR Failed to process request"
  ]
}

locals {
  # Parse log levels from entries
  log_levels = [
    for entry in var.log_entries :
    provider::pyvider::split(entry, " ")[2]  # Extract the log level (3rd element)
  ]

  # Create log summary
  log_summary = provider::pyvider::join([
    "Log Analysis Summary:",
    provider::pyvider::format("Total entries: {count}", {
      count = length(var.log_entries)
    }),
    provider::pyvider::format("Levels found: {levels}", {
      levels = provider::pyvider::join(local.log_levels, ", ")
    })
  ], "\n")
}

# URL and path manipulation
variable "base_urls" {
  type = list(string)
  default = [
    "https://api.example.com/v1/users",
    "https://api.example.com/v1/orders",
    "https://api.example.com/v1/products"
  ]
}

variable "api_endpoints" {
  type = list(string)
  default = ["list", "create", "update", "delete"]
}

locals {
  # Generate all possible API endpoint URLs
  api_urls = flatten([
    for base_url in var.base_urls : [
      for endpoint in var.api_endpoints :
      provider::pyvider::format("{base}/{action}", {
        base   = base_url
        action = endpoint
      })
    ]
  ])

  # Extract service names from URLs
  service_names = [
    for url in var.base_urls :
    provider::pyvider::split(provider::pyvider::split(url, "/")[4], "?")[0]  # Extract path segment after v1
  ]
}

# Environment variable processing
variable "env_config" {
  type = map(string)
  default = {
    APP_NAME     = "MyApplication"
    APP_VERSION  = "1.2.3"
    DEBUG_MODE   = "true"
    DATABASE_URL = "postgresql://user:pass@localhost:5432/mydb"
  }
}

locals {
  # Convert environment variables to different formats
  env_exports = [
    for key, value in var.env_config :
    provider::pyvider::format("export {key}={value}", {
      key   = key
      value = provider::pyvider::format("\"{val}\"", { val = value })
    })
  ]

  # Create .env file content
  env_file_content = provider::pyvider::join(local.env_exports, "\n")

  # Generate application title from app name
  app_title = provider::pyvider::replace(
    provider::pyvider::upper(var.env_config.APP_NAME),
    "_",
    " "
  )
}

# CSV data processing
variable "csv_data" {
  type    = string
  default = "name,age,city\nAlice,30,New York\nBob,25,Los Angeles\nCharlie,35,Chicago"
}

locals {
  # Split CSV into rows
  csv_rows = provider::pyvider::split(var.csv_data, "\n")

  # Extract header and data rows
  csv_header = provider::pyvider::split(local.csv_rows[0], ",")
  csv_data_rows = slice(local.csv_rows, 1, length(local.csv_rows))

  # Process each data row
  csv_records = [
    for row in local.csv_data_rows : {
      name = provider::pyvider::split(row, ",")[0]
      age  = provider::pyvider::split(row, ",")[1]
      city = provider::pyvider::split(row, ",")[2]
    }
  ]

  # Generate a summary report
  csv_summary = provider::pyvider::join([
    "CSV Processing Summary:",
    provider::pyvider::format("Columns: {headers}", {
      headers = provider::pyvider::join(local.csv_header, ", ")
    }),
    provider::pyvider::format("Records: {count}", {
      count = length(local.csv_records)
    }),
    "Sample record:",
    provider::pyvider::format("  {name} ({age}) from {city}", {
      name = local.csv_records[0].name
      age  = local.csv_records[0].age
      city = local.csv_records[0].city
    })
  ], "\n")
}

# Create output files with processed content
resource "pyvider_file_content" "server_config" {
  filename = "/tmp/${local.config_filename}"
  content  = local.config_content
}

resource "pyvider_file_content" "log_analysis" {
  filename = "/tmp/log_analysis.txt"
  content  = local.log_summary
}

resource "pyvider_file_content" "api_urls" {
  filename = "/tmp/api_endpoints.txt"
  content = join("\n", concat(
    ["Generated API Endpoints:", ""],
    local.api_urls,
    ["", "Service Names:"],
    [for name in local.service_names : "- ${name}"]
  ))
}

resource "pyvider_file_content" "environment" {
  filename = "/tmp/app.env"
  content  = local.env_file_content
}

resource "pyvider_file_content" "csv_report" {
  filename = "/tmp/csv_processing_report.txt"
  content  = local.csv_summary
}

# Output processed data
output "text_processing_results" {
  value = {
    configuration = {
      filename = local.config_filename
      content_preview = substr(local.config_content, 0, 50)
      file_path = pyvider_file_content.server_config.filename
    }

    logging = {
      levels_found = local.log_levels
      summary_file = pyvider_file_content.log_analysis.filename
    }

    api_management = {
      total_urls = length(local.api_urls)
      service_count = length(local.service_names)
      services = local.service_names
      urls_file = pyvider_file_content.api_urls.filename
    }

    environment = {
      app_title = local.app_title
      env_file = pyvider_file_content.environment.filename
      export_count = length(local.env_exports)
    }

    csv_processing = {
      header_columns = local.csv_header
      record_count = length(local.csv_records)
      sample_record = local.csv_records[0]
      report_file = pyvider_file_content.csv_report.filename
    }
  }
}


# === Utility_Functions Example ===

# Utility function examples for format_size, truncate, and pluralize

# File size formatting examples
variable "storage_data" {
  type = list(object({
    name = string
    size_bytes = number
    type = string
  }))
  default = [
    { name = "system.log", size_bytes = 1024, type = "log" },
    { name = "database.db", size_bytes = 2147483648, type = "database" },
    { name = "backup.tar.gz", size_bytes = 5368709120, type = "archive" },
    { name = "cache.tmp", size_bytes = 134217728, type = "cache" },
    { name = "config.json", size_bytes = 2048, type = "config" },
    { name = "media.mp4", size_bytes = 1073741824, type = "media" }
  ]
}

locals {
  # Format file sizes with different precisions
  file_size_analysis = [
    for file in var.storage_data : {
      name = file.name
      type = file.type
      raw_bytes = file.size_bytes
      size_default = provider::pyvider::format_size(file.size_bytes)      # 1 decimal place (default)
      size_precise = provider::pyvider::format_size(file.size_bytes, 2)  # 2 decimal places
      size_rounded = provider::pyvider::format_size(file.size_bytes, 0)  # No decimal places
    }
  ]

  # Calculate totals by file type
  totals_by_type = {
    for type in distinct([for f in var.storage_data : f.type]) :
    type => sum([for f in var.storage_data : f.size_bytes if f.type == type])
  }

  formatted_totals = {
    for type, total_bytes in local.totals_by_type :
    type => {
      bytes = total_bytes
      formatted = provider::pyvider::format_size(total_bytes, 1)
      file_count = length([for f in var.storage_data : f if f.type == type])
    }
  }
}

# Text truncation examples
variable "content_samples" {
  type = list(object({
    title = string
    description = string
    category = string
  }))
  default = [
    {
      title = "Getting Started with Infrastructure as Code using Terraform"
      description = "This comprehensive guide covers everything you need to know about Infrastructure as Code (IaC) principles and practices. Learn how to manage your infrastructure using declarative configuration files, version control best practices, and automated deployment strategies that will improve your development workflow."
      category = "Tutorial"
    },
    {
      title = "Advanced Terraform Provider Development Techniques"
      description = "Dive deep into custom Terraform provider development with advanced patterns, testing strategies, and performance optimization techniques for enterprise-scale infrastructure management."
      category = "Advanced"
    },
    {
      title = "Quick Reference"
      description = "Commands and syntax."
      category = "Reference"
    }
  ]
}

locals {
  # Create different truncation examples
  content_previews = [
    for content in var.content_samples : {
      original_title = content.title
      original_description = content.description
      category = content.category

      # Title truncations for different contexts
      short_title = provider::pyvider::truncate(content.title, 30, "...")
      medium_title = provider::pyvider::truncate(content.title, 50, "...")
      card_title = provider::pyvider::truncate(content.title, 40, " [more]")

      # Description truncations
      preview_short = provider::pyvider::truncate(content.description, 100, "... [Read more]")
      preview_medium = provider::pyvider::truncate(content.description, 200, "...")
      tweet_length = provider::pyvider::truncate(content.description, 140, "... #terraform")

      # No truncation needed examples
      title_fits = provider::pyvider::length(content.title) <= 50
      description_fits = provider::pyvider::length(content.description) <= 200
    }
  ]
}

# Pluralization examples
variable "system_stats" {
  type = object({
    users = number
    active_sessions = number
    files = number
    errors = number
    warnings = number
    processes = number
    memory_mb = number
    disk_gb = number
  })
  default = {
    users = 1
    active_sessions = 23
    files = 1456
    errors = 0
    warnings = 5
    processes = 47
    memory_mb = 8192
    disk_gb = 500
  }
}

locals {
  # Create user-friendly status messages
  system_status_messages = [
    {
      category = "Users"
      message = var.system_stats.users == 0 ?
        "No users online" :
        "${var.system_stats.users} ${provider::pyvider::pluralize("user", var.system_stats.users)} online"
    },
    {
      category = "Sessions"
      message = "${var.system_stats.active_sessions} active ${provider::pyvider::pluralize("session", var.system_stats.active_sessions)}"
    },
    {
      category = "Files"
      message = "${var.system_stats.files} ${provider::pyvider::pluralize("file", var.system_stats.files)} in system"
    },
    {
      category = "Issues"
      message = var.system_stats.errors == 0 && var.system_stats.warnings == 0 ?
        "No issues detected" :
        join(" and ", compact([
          var.system_stats.errors > 0 ? "${var.system_stats.errors} ${provider::pyvider::pluralize("error", var.system_stats.errors)}" : "",
          var.system_stats.warnings > 0 ? "${var.system_stats.warnings} ${provider::pyvider::pluralize("warning", var.system_stats.warnings)}" : ""
        ]))
    },
    {
      category = "Processes"
      message = "${var.system_stats.processes} ${provider::pyvider::pluralize("process", var.system_stats.processes)} running"
    }
  ]
}

# Irregular plurals examples
variable "inventory_counts" {
  type = map(number)
  default = {
    "child" = 3
    "person" = 12
    "mouse" = 1
    "foot" = 2
    "tooth" = 28
    "goose" = 0
    "ox" = 4
    "woman" = 7
    "man" = 15
  }
}

locals {
  # Handle irregular plurals with custom forms
  irregular_plurals = {
    "child" = "children"
    "person" = "people"
    "mouse" = "mice"
    "foot" = "feet"
    "tooth" = "teeth"
    "goose" = "geese"
    "ox" = "oxen"
    "woman" = "women"
    "man" = "men"
  }

  inventory_messages = [
    for word, count in var.inventory_counts : {
      word = word
      count = count
      message = "${count} ${provider::pyvider::pluralize(word, count, lookup(local.irregular_plurals, word, null))}"
    }
  ]
}

# Combined utility function examples
variable "log_entries" {
  type = list(object({
    timestamp = string
    level = string
    message = string
    component = string
    size_bytes = number
  }))
  default = [
    {
      timestamp = "2024-01-15T10:30:15Z"
      level = "ERROR"
      message = "Database connection failed after multiple retry attempts. Connection timeout exceeded while trying to establish connection to primary database server."
      component = "DatabaseService"
      size_bytes = 256
    },
    {
      timestamp = "2024-01-15T10:30:16Z"
      level = "INFO"
      message = "Successfully processed user authentication request"
      component = "AuthService"
      size_bytes = 128
    },
    {
      timestamp = "2024-01-15T10:30:17Z"
      level = "WARN"
      message = "Cache miss rate is higher than expected threshold"
      component = "CacheService"
      size_bytes = 164
    }
  ]
}

locals {
  # Process log entries with multiple utility functions
  processed_logs = [
    for idx, entry in var.log_entries : {
      index = idx + 1
      timestamp = entry.timestamp
      level = entry.level
      component = provider::pyvider::truncate(entry.component, 12, "")
      short_message = provider::pyvider::truncate(entry.message, 50, "...")
      full_message = entry.message
      entry_size = provider::pyvider::format_size(entry.size_bytes, 0)
      line_number = idx + 1
    }
  ]

  # Create log summary statistics
  log_stats = {
    total_entries = length(var.log_entries)
    total_size = sum([for entry in var.log_entries : entry.size_bytes])
    by_level = {
      for level in distinct([for entry in var.log_entries : entry.level]) :
      level => length([for entry in var.log_entries : entry if entry.level == level])
    }
  }

  log_summary_messages = [
    for level, count in local.log_stats.by_level :
    "${count} ${provider::pyvider::pluralize("entry", count)} at ${level} level"
  ]
}

# Performance metrics with utility functions
variable "performance_data" {
  type = object({
    response_times_ms = list(number)
    memory_usage_bytes = list(number)
    request_counts = list(number)
    error_counts = list(number)
  })
  default = {
    response_times_ms = [45, 123, 67, 234, 89, 156, 78, 201, 92, 134]
    memory_usage_bytes = [134217728, 268435456, 402653184, 536870912, 671088640]
    request_counts = [1250, 2340, 1876, 3456, 2109]
    error_counts = [0, 2, 1, 5, 0]
  }
}

locals {
  # Calculate performance statistics
  perf_stats = {
    response_time = {
      count = length(var.performance_data.response_times_ms)
      avg_ms = sum(var.performance_data.response_times_ms) / length(var.performance_data.response_times_ms)
      max_ms = max(var.performance_data.response_times_ms)
      min_ms = min(var.performance_data.response_times_ms)
    }
    memory = {
      samples = length(var.performance_data.memory_usage_bytes)
      avg_bytes = sum(var.performance_data.memory_usage_bytes) / length(var.performance_data.memory_usage_bytes)
      max_bytes = max(var.performance_data.memory_usage_bytes)
      peak_formatted = provider::pyvider::format_size(max(var.performance_data.memory_usage_bytes), 1)
      avg_formatted = provider::pyvider::format_size(sum(var.performance_data.memory_usage_bytes) / length(var.performance_data.memory_usage_bytes), 1)
    }
    requests = {
      total = sum(var.performance_data.request_counts)
      periods = length(var.performance_data.request_counts)
      avg_per_period = sum(var.performance_data.request_counts) / length(var.performance_data.request_counts)
    }
    errors = {
      total = sum(var.performance_data.error_counts)
      periods_with_errors = length([for count in var.performance_data.error_counts : count if count > 0])
    }
  }

  # Create human-readable performance summary
  performance_messages = [
    "Response Time: avg ${format("%.1f", local.perf_stats.response_time.avg_ms)}ms over ${local.perf_stats.response_time.count} ${provider::pyvider::pluralize("sample", local.perf_stats.response_time.count)}",
    "Memory Usage: peak ${local.perf_stats.memory.peak_formatted}, average ${local.perf_stats.memory.avg_formatted}",
    "Requests: ${local.perf_stats.requests.total} total across ${local.perf_stats.requests.periods} ${provider::pyvider::pluralize("period", local.perf_stats.requests.periods)}",
    "Errors: ${local.perf_stats.errors.total} ${provider::pyvider::pluralize("error", local.perf_stats.errors.total)} in ${local.perf_stats.errors.periods_with_errors} ${provider::pyvider::pluralize("period", local.perf_stats.errors.periods_with_errors)}"
  ]
}

# Create comprehensive output files
resource "pyvider_file_content" "storage_analysis" {
  filename = "/tmp/storage_analysis.txt"
  content = join("\n", concat(
    ["=== Storage Analysis Report ===", ""],
    ["Individual Files:"],
    [
      for file in local.file_size_analysis :
      "${file.name} (${file.type}): ${file.size_precise} (${file.raw_bytes} bytes)"
    ],
    ["", "Totals by Type:"],
    [
      for type, info in local.formatted_totals :
      "${type}: ${info.formatted} across ${info.file_count} ${provider::pyvider::pluralize("file", info.file_count)}"
    ]
  ))
}

resource "pyvider_file_content" "content_previews" {
  filename = "/tmp/content_previews.html"
  content = join("\n", flatten([
    ["<!DOCTYPE html>", "<html>", "<head><title>Content Previews</title></head>", "<body>", "<h1>Content Preview Examples</h1>"],
    [
      for preview in local.content_previews : [
        "<div class=\"content-item\">",
        "  <h3>${preview.short_title}</h3>",
        "  <p class=\"preview\">${preview.preview_short}</p>",
        "  <small>Category: ${preview.category}</small>",
        "  <p><strong>Original:</strong> ${preview.original_title}</p>",
        "</div>",
        ""
      ]
    ],
    ["</body>", "</html>"]
  ]))
}

resource "pyvider_file_content" "system_status" {
  filename = "/tmp/system_status.txt"
  content = join("\n", concat(
    ["=== System Status Dashboard ===", ""],
    [for status in local.system_status_messages : "${status.category}: ${status.message}"],
    ["", "=== Memory & Storage ==="],
    ["Memory: ${provider::pyvider::format_size(var.system_stats.memory_mb * 1024 * 1024, 1)}"],
    ["Disk: ${provider::pyvider::format_size(var.system_stats.disk_gb * 1024 * 1024 * 1024, 1)}"]
  ))
}

resource "pyvider_file_content" "log_summary" {
  filename = "/tmp/log_summary.txt"
  content = join("\n", concat(
    ["=== Log Analysis Summary ===", ""],
    ["Processed ${local.log_stats.total_entries} ${provider::pyvider::pluralize("entry", local.log_stats.total_entries)} (${provider::pyvider::format_size(local.log_stats.total_size, 1)})"],
    [""],
    ["By Level:"],
    local.log_summary_messages,
    ["", "Recent Entries:"],
    [
      for log in local.processed_logs :
      "[${log.timestamp}] ${log.level} ${log.component}: ${log.short_message} (${log.entry_size})"
    ]
  ))
}

resource "pyvider_file_content" "performance_report" {
  filename = "/tmp/performance_report.txt"
  content = join("\n", concat(
    ["=== Performance Analysis Report ===", ""],
    local.performance_messages
  ))
}

resource "pyvider_file_content" "pluralization_examples" {
  filename = "/tmp/pluralization_examples.txt"
  content = join("\n", concat(
    ["=== Pluralization Examples ===", ""],
    ["Regular Plurals:"],
    [for status in local.system_status_messages : "- ${status.message}"],
    ["", "Irregular Plurals:"],
    [for item in local.inventory_messages : "- ${item.message}"]
  ))
}

# Output comprehensive results
output "utility_function_results" {
  value = {
    file_storage = {
      files_analyzed = length(local.file_size_analysis)
      types_found = length(local.formatted_totals)
      total_storage = provider::pyvider::format_size(sum(values(local.totals_by_type)), 2)
      report_file = pyvider_file_content.storage_analysis.filename
    }

    content_management = {
      content_items = length(local.content_previews)
      preview_file = pyvider_file_content.content_previews.filename
      truncation_examples = length(local.content_previews) * 3  # 3 truncation types per item
    }

    system_monitoring = {
      status_messages = length(local.system_status_messages)
      status_file = pyvider_file_content.system_status.filename
      log_entries = length(local.processed_logs)
      log_file = pyvider_file_content.log_summary.filename
    }

    performance_analysis = {
      metrics_processed = 4  # response_time, memory, requests, errors
      report_file = pyvider_file_content.performance_report.filename
      summary_messages = length(local.performance_messages)
    }

    pluralization = {
      regular_examples = length(local.system_status_messages)
      irregular_examples = length(local.inventory_messages)
      examples_file = pyvider_file_content.pluralization_examples.filename
    }
  }
}


