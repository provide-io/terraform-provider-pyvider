terraform {
  required_providers {
    pyvider = {
      source  = "local/providers/pyvider"
      version = ">= 0.0.5"
    }
  }
}

provider "pyvider" {
  # Provider configuration
  # Add your configuration options here
}

# Generated by Plating - Executable Example
# Basic lens_jq function examples

# Example 1: Simple field extraction
locals {
  user_data = {
    id    = 123
    name  = "Alice Johnson"
    email = "alice@example.com"
  }

  user_name  = provider::pyvider::lens_jq(local.user_data, ".name")
  user_email = provider::pyvider::lens_jq(local.user_data, ".email")
  user_id    = provider::pyvider::lens_jq(local.user_data, ".id")
}

# Example 2: Array operations
locals {
  colors = ["red", "green", "blue", "yellow"]

  first_color = provider::pyvider::lens_jq(local.colors, ".[0]")
  last_color  = provider::pyvider::lens_jq(local.colors, ".[-1]")
  color_count = provider::pyvider::lens_jq(local.colors, "length")
}

# Example 3: Nested field access
locals {
  config = {
    database = {
      host = "localhost"
      port = 5432
    }
    cache = {
      host = "redis.local"
      port = 6379
    }
  }

  db_host    = provider::pyvider::lens_jq(local.config, ".database.host")
  db_port    = provider::pyvider::lens_jq(local.config, ".database.port")
  cache_host = provider::pyvider::lens_jq(local.config, ".cache.host")
}

# Example 4: Simple data transformation
locals {
  users = [
    { name = "Alice", active = true },
    { name = "Bob", active = false },
    { name = "Carol", active = true }
  ]

  active_users = provider::pyvider::lens_jq(local.users, "map(select(.active == true))")
  user_names   = provider::pyvider::lens_jq(local.users, "map(.name)")
}

# Output the results
output "lens_jq_examples" {
  value = {
    user_extraction = {
      name  = local.user_name
      email = local.user_email
      id    = local.user_id
    }
    array_operations = {
      first = local.first_color
      last  = local.last_color
      count = local.color_count
    }
    nested_access = {
      db_host    = local.db_host
      cache_host = local.cache_host
    }
    transformations = {
      active_users = length(local.active_users)
      all_names    = length(local.user_names)
    }
  }
}

