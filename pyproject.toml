[project]
name = "terraform-provider-pyvider"
version = "0.0.5"
description = "The official Pyvider provider, built with Pyvider."
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "flavorpack",
    "plating",
    "provide-foundation",
    "pyvider>=0.0.0.post0",
    "pyvider-components>=0.0.0.post1",
    "pyvider-cty>=0.0.112",
]

[project.scripts]
terraform-provider-pyvider = "pyvider.cli:main"

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
py-modules = []
packages = []

[tool.flavor]
entry_point = "pyvider.cli:main"
output_path = "dist/terraform-provider-pyvider"
# Ensure the binary is named terraform-provider-pyvider so detection works
command = "{workenv}/bin/terraform-provider-pyvider"

[tool.flavor.metadata]
package_name = "terraform-provider-pyvider"
#version = "0.1.0"

[tool.flavor.build]
# This meta package just brings together components
dependencies = []
exclude = [
    "**/.terraform/**",
    "**/.venv/**", 
    "**/__pycache__/**",
    "**/*.pyc",
    "**/*.pyo",
    "**/.DS_Store",
]

[tool.flavor.signing]
private_key_path = "keys/provider-private.key"
public_key_path = "keys/provider-public.key"

[tool.flavor.execution]
# Runtime environment configuration for Terraform provider protocol
[tool.flavor.execution.runtime]
[tool.flavor.execution.runtime.env]
# Pass through all Terraform environment variables as-is
pass = ["TF_*", "PLUGIN_*"]

[tool.uv.sources]
provide-foundation = { workspace = true }
pyvider-components = { workspace = true }
plating = { workspace = true }
flavorpack = { workspace = true }
