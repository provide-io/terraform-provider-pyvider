terraform {
  required_providers {
    pyvider = {
      source  = "local/providers/pyvider"
      version = ">= 0.0.5"
    }
  }
}

provider "pyvider" {
  # Provider configuration
  # Add your configuration options here
}

# Generated by Plating - Executable Example
# Multi-environment token management examples

variable "environment" {
  description = "Deployment environment"
  type        = string
  default     = "development"
  validation {
    condition     = contains(["development", "staging", "production"], var.environment)
    error_message = "Environment must be development, staging, or production."
  }
}

variable "application_name" {
  description = "Name of the application"
  type        = string
  default     = "example-app"
}

# Environment-specific token configuration
locals {
  env_config = {
    development = {
      token_prefix      = "dev"
      monitoring_level  = "basic"
      rotation_required = false
      alert_channels    = ["email"]
      backup_tokens     = 1
    }
    staging = {
      token_prefix      = "staging"
      monitoring_level  = "enhanced"
      rotation_required = true
      alert_channels    = ["email", "slack"]
      backup_tokens     = 2
    }
    production = {
      token_prefix      = "prod"
      monitoring_level  = "comprehensive"
      rotation_required = true
      alert_channels    = ["email", "slack", "pagerduty"]
      backup_tokens     = 3
    }
  }

  current_config = local.env_config[var.environment]

  # Prepare template variables for token_registry.json
  token_registry_vars = {
    environment      = var.environment
    application_name = var.application_name
    timestamp        = timestamp()
    current_config   = local.current_config

    app_primary_name    = pyvider_timed_token.app_primary.name
    app_primary_id      = pyvider_timed_token.app_primary.id
    app_primary_expires = pyvider_timed_token.app_primary.expires_at

    app_backup_tokens = [
      for i, token in pyvider_timed_token.app_backup : {
        name       = token.name
        id         = token.id
        expires_at = token.expires_at
        type       = "backup"
        sequence   = i + 1
      }
    ]

    database_read_name    = pyvider_timed_token.database_read.name
    database_read_id      = pyvider_timed_token.database_read.id
    database_read_expires = pyvider_timed_token.database_read.expires_at

    database_write_config = var.environment == "production" ? jsonencode({
      name        = pyvider_timed_token.database_write[0].name
      id          = pyvider_timed_token.database_write[0].id
      expires_at  = pyvider_timed_token.database_write[0].expires_at
      permissions = ["read", "write", "list", "delete"]
    }) : "null"

    api_gateway_name    = pyvider_timed_token.api_gateway.name
    api_gateway_id      = pyvider_timed_token.api_gateway.id
    api_gateway_expires = pyvider_timed_token.api_gateway.expires_at

    api_internal_name    = pyvider_timed_token.api_internal.name
    api_internal_id      = pyvider_timed_token.api_internal.id
    api_internal_expires = pyvider_timed_token.api_internal.expires_at

    metrics_collector_name    = pyvider_timed_token.metrics_collector.name
    metrics_collector_id      = pyvider_timed_token.metrics_collector.id
    metrics_collector_expires = pyvider_timed_token.metrics_collector.expires_at

    log_aggregator_name    = pyvider_timed_token.log_aggregator.name
    log_aggregator_id      = pyvider_timed_token.log_aggregator.id
    log_aggregator_expires = pyvider_timed_token.log_aggregator.expires_at

    trace_collector_config = var.environment != "development" ? jsonencode({
      name       = pyvider_timed_token.trace_collector[0].name
      id         = pyvider_timed_token.trace_collector[0].id
      expires_at = pyvider_timed_token.trace_collector[0].expires_at
      service    = "jaeger"
    }) : "null"

    rotation_required = local.current_config.rotation_required
    monitoring_level  = local.current_config.monitoring_level
    alert_channels    = local.current_config.alert_channels
  }

  # Prepare template variables for app_config.yaml
  app_config_vars = {
    application_name = var.application_name
    environment      = var.environment

    app_primary_id      = pyvider_timed_token.app_primary.id
    app_primary_name    = pyvider_timed_token.app_primary.name
    app_primary_expires = pyvider_timed_token.app_primary.expires_at

    app_backup_tokens = [
      for token in pyvider_timed_token.app_backup : {
        id         = token.id
        name       = token.name
        expires_at = token.expires_at
      }
    ]

    rotation_required    = local.current_config.rotation_required
    warn_before_minutes  = var.environment == "production" ? 10 : 30
    has_backups          = length(pyvider_timed_token.app_backup) > 0

    database_read_id              = pyvider_timed_token.database_read.id
    database_read_name            = pyvider_timed_token.database_read.name
    database_read_expires         = pyvider_timed_token.database_read.expires_at
    db_read_max_connections       = var.environment == "production" ? 20 : 5

    database_write_connection = var.environment == "production" ? {
      token_id        = pyvider_timed_token.database_write[0].id
      token_name      = pyvider_timed_token.database_write[0].name
      expires_at      = pyvider_timed_token.database_write[0].expires_at
      max_connections = 10
    } : null

    api_gateway_id      = pyvider_timed_token.api_gateway.id
    api_gateway_name    = pyvider_timed_token.api_gateway.name
    api_gateway_expires = pyvider_timed_token.api_gateway.expires_at
    api_gateway_url     = "https://${var.environment == "production" ? "api" : "${var.environment}-api"}.example.com"
    api_gateway_timeout = var.environment == "production" ? 10 : 30

    api_internal_id      = pyvider_timed_token.api_internal.id
    api_internal_name    = pyvider_timed_token.api_internal.name
    api_internal_expires = pyvider_timed_token.api_internal.expires_at
    api_internal_url     = "https://internal-${var.environment}.example.com"

    metrics_collector_id      = pyvider_timed_token.metrics_collector.id
    metrics_collector_name    = pyvider_timed_token.metrics_collector.name
    metrics_collector_expires = pyvider_timed_token.metrics_collector.expires_at
    metrics_endpoint          = "https://metrics-${var.environment}.example.com"
    metrics_interval          = var.environment == "production" ? 15 : 60

    log_aggregator_id      = pyvider_timed_token.log_aggregator.id
    log_aggregator_name    = pyvider_timed_token.log_aggregator.name
    log_aggregator_expires = pyvider_timed_token.log_aggregator.expires_at
    logs_endpoint          = "https://logs-${var.environment}.example.com"
    log_level              = var.environment == "production" ? "warn" : (var.environment == "staging" ? "info" : "debug")

    tracing_config = var.environment != "development" ? {
      enabled       = true
      token_id      = pyvider_timed_token.trace_collector[0].id
      token_name    = pyvider_timed_token.trace_collector[0].name
      expires_at    = pyvider_timed_token.trace_collector[0].expires_at
      endpoint      = "https://traces-${var.environment}.example.com"
      sampling_rate = var.environment == "production" ? 0.1 : 1.0
    } : {
      enabled = false
    }

    monitoring_level      = local.current_config.monitoring_level
    compliance_required   = var.environment == "production"
    backup_tokens_count   = local.current_config.backup_tokens
  }

  # Prepare template variables for monitoring_config.json
  monitoring_config_vars = {
    environment      = var.environment
    application_name = var.application_name
    monitoring_level = local.current_config.monitoring_level

    app_primary_id         = pyvider_timed_token.app_primary.id
    app_primary_name       = pyvider_timed_token.app_primary.name
    app_primary_expires    = pyvider_timed_token.app_primary.expires_at
    expiry_warning_minutes = var.environment == "production" ? 10 : 30

    backup_tokens_monitoring = [
      for i, token in pyvider_timed_token.app_backup : {
        token_id    = token.id
        token_name  = token.name
        expires_at  = token.expires_at
        criticality = "medium"
        sequence    = i + 1
      }
    ]

    database_read_id      = pyvider_timed_token.database_read.id
    database_read_name    = pyvider_timed_token.database_read.name
    database_read_expires = pyvider_timed_token.database_read.expires_at

    api_gateway_id      = pyvider_timed_token.api_gateway.id
    api_gateway_name    = pyvider_timed_token.api_gateway.name
    api_gateway_expires = pyvider_timed_token.api_gateway.expires_at

    api_internal_id      = pyvider_timed_token.api_internal.id
    api_internal_name    = pyvider_timed_token.api_internal.name
    api_internal_expires = pyvider_timed_token.api_internal.expires_at

    metrics_collector_id      = pyvider_timed_token.metrics_collector.id
    metrics_collector_name    = pyvider_timed_token.metrics_collector.name
    metrics_collector_expires = pyvider_timed_token.metrics_collector.expires_at

    log_aggregator_id      = pyvider_timed_token.log_aggregator.id
    log_aggregator_name    = pyvider_timed_token.log_aggregator.name
    log_aggregator_expires = pyvider_timed_token.log_aggregator.expires_at

    alert_channels         = local.current_config.alert_channels
    immediate_escalation   = var.environment == "production"
    business_hours_only    = var.environment == "development"
    weekend_alerts         = var.environment != "development"

    health_check_interval  = var.environment == "production" ? 30 : 300
    health_check_threshold = var.environment == "production" ? 2 : 5

    token_validation_url = "https://auth-${var.environment}.example.com/validate"
    api_health_url       = "https://${var.environment == "production" ? "api" : "${var.environment}-api"}.example.com/health"

    audit_logging         = var.environment == "production"
    access_review_required = var.environment == "production"
  }
}

# Example 1: Environment-specific application tokens
resource "pyvider_timed_token" "app_primary" {
  name = "${local.current_config.token_prefix}-${var.application_name}-primary"
}

resource "pyvider_timed_token" "app_backup" {
  count = local.current_config.backup_tokens
  name  = "${local.current_config.token_prefix}-${var.application_name}-backup-${count.index + 1}"
}

# Example 2: Database tokens per environment
resource "pyvider_timed_token" "database_read" {
  name = "${local.current_config.token_prefix}-database-readonly"
}

resource "pyvider_timed_token" "database_write" {
  count = var.environment == "production" ? 1 : 0
  name  = "${local.current_config.token_prefix}-database-readwrite"
}

# Example 3: API gateway tokens
resource "pyvider_timed_token" "api_gateway" {
  name = "${local.current_config.token_prefix}-api-gateway"
}

resource "pyvider_timed_token" "api_internal" {
  name = "${local.current_config.token_prefix}-internal-services"
}

# Example 4: Monitoring and observability tokens
resource "pyvider_timed_token" "metrics_collector" {
  name = "${local.current_config.token_prefix}-metrics-collector"
}

resource "pyvider_timed_token" "log_aggregator" {
  name = "${local.current_config.token_prefix}-log-aggregator"
}

resource "pyvider_timed_token" "trace_collector" {
  count = var.environment != "development" ? 1 : 0
  name  = "${local.current_config.token_prefix}-trace-collector"
}

# Create environment-specific token registry using inline JSON encoding
resource "pyvider_file_content" "token_registry" {
  filename = "/tmp/${var.environment}_token_registry.json"
  content  = jsonencode(local.token_registry_vars)
}

# Create environment-specific application configuration using inline YAML encoding
resource "pyvider_file_content" "app_config" {
  filename = "/tmp/${var.environment}_app_config.yaml"
  content  = yamlencode(local.app_config_vars)
}

# Create monitoring configuration using inline JSON encoding
resource "pyvider_file_content" "monitoring_config" {
  filename = "/tmp/${var.environment}_monitoring.json"
  content  = jsonencode(local.monitoring_config_vars)
}

# Create deployment summary
resource "pyvider_file_content" "deployment_summary" {
  filename = "/tmp/${var.environment}_deployment_summary.txt"
  content = join("\n", [
    "=== ${title(var.environment)} Environment Token Deployment ===",
    "",
    "Application: ${var.application_name}",
    "Environment: ${var.environment}",
    "Configuration Level: ${local.current_config.monitoring_level}",
    "Generated: ${timestamp()}",
    "",
    "=== Application Tokens ===",
    "Primary Token:",
    "  Name: ${pyvider_timed_token.app_primary.name}",
    "  ID: ${pyvider_timed_token.app_primary.id}",
    "  Expires: ${pyvider_timed_token.app_primary.expires_at}",
    "",
    "Backup Tokens (${length(pyvider_timed_token.app_backup)}):",
    join("\n", [
      for i, token in pyvider_timed_token.app_backup :
      "  ${i + 1}. ${token.name} (${token.id}) - Expires: ${token.expires_at}"
    ]),
    "",
    "=== Infrastructure Tokens ===",
    "Database Access:",
    "  Read-Only: ${pyvider_timed_token.database_read.name} (${pyvider_timed_token.database_read.id})",
    var.environment == "production" ? "  Read-Write: ${pyvider_timed_token.database_write[0].name} (${pyvider_timed_token.database_write[0].id})" : "  Read-Write: Not configured for ${var.environment}",
    "",
    "API Services:",
    "  Gateway: ${pyvider_timed_token.api_gateway.name} (${pyvider_timed_token.api_gateway.id})",
    "  Internal: ${pyvider_timed_token.api_internal.name} (${pyvider_timed_token.api_internal.id})",
    "",
    "=== Observability Tokens ===",
    "Metrics: ${pyvider_timed_token.metrics_collector.name} (${pyvider_timed_token.metrics_collector.id})",
    "Logs: ${pyvider_timed_token.log_aggregator.name} (${pyvider_timed_token.log_aggregator.id})",
    var.environment != "development" ? "Traces: ${pyvider_timed_token.trace_collector[0].name} (${pyvider_timed_token.trace_collector[0].id})" : "Traces: Disabled for development",
    "",
    "=== Security Configuration ===",
    "Token Rotation Required: ${local.current_config.rotation_required ? "Yes" : "No"}",
    "Monitoring Level: ${title(local.current_config.monitoring_level)}",
    "Alert Channels: ${join(", ", local.current_config.alert_channels)}",
    "Backup Tokens: ${local.current_config.backup_tokens}",
    "",
    "=== Compliance Features ===",
    "✅ Environment Isolation",
    "✅ Automatic Token Expiration",
    "✅ Sensitive Data Protection",
    "✅ Token Lifecycle Management",
    var.environment == "production" ? "✅ Production Security Controls" : "ℹ️  Development Environment (Relaxed Controls)",
    "",
    "⚠️  All tokens are time-limited and will expire in 1 hour.",
    "⚠️  Monitor expiration times and plan for rotation.",
    var.environment == "production" ? "⚠️  Production environment requires immediate attention for token issues." : "",
    "",
    "Configuration files generated:",
    "- ${pyvider_file_content.token_registry.filename}",
    "- ${pyvider_file_content.app_config.filename}",
    "- ${pyvider_file_content.monitoring_config.filename}",
    "- ${pyvider_file_content.deployment_summary.filename}"
  ])
}

output "multi_environment_deployment" {
  description = "Multi-environment token deployment summary"
  value = {
    environment    = var.environment
    application    = var.application_name
    configuration  = local.current_config

    tokens = {
      application = {
        primary = {
          name       = pyvider_timed_token.app_primary.name
          id         = pyvider_timed_token.app_primary.id
          expires_at = pyvider_timed_token.app_primary.expires_at
        }
        backup_count = length(pyvider_timed_token.app_backup)
      }

      infrastructure = {
        database_readonly = {
          name = pyvider_timed_token.database_read.name
          id   = pyvider_timed_token.database_read.id
        }
        database_readwrite_enabled = var.environment == "production"
        api_gateway = {
          name = pyvider_timed_token.api_gateway.name
          id   = pyvider_timed_token.api_gateway.id
        }
        internal_apis = {
          name = pyvider_timed_token.api_internal.name
          id   = pyvider_timed_token.api_internal.id
        }
      }

      observability = {
        metrics_enabled = true
        logging_enabled = true
        tracing_enabled = var.environment != "development"
      }
    }

    security = {
      rotation_required = local.current_config.rotation_required
      monitoring_level  = local.current_config.monitoring_level
      backup_strategy   = local.current_config.backup_tokens > 0
      alert_channels    = local.current_config.alert_channels
    }

    files_generated = [
      pyvider_file_content.token_registry.filename,
      pyvider_file_content.app_config.filename,
      pyvider_file_content.monitoring_config.filename,
      pyvider_file_content.deployment_summary.filename
    ]

    total_tokens = (
      1 +                                                # primary
      length(pyvider_timed_token.app_backup) +           # backups
      1 +                                                # database read
      (var.environment == "production" ? 1 : 0) +        # database write
      2 +                                                # api tokens
      2 +                                                # observability (metrics + logs)
      (var.environment != "development" ? 1 : 0)         # tracing
    )
  }
}

