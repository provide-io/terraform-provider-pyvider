name: 🚀 Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.11'

jobs:
  docs:
    name: 📚 Build Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Provider
        uses: actions/checkout@v4
        with:
          path: terraform-provider-pyvider
      
      - name: 📥 Checkout pyvider-components
        uses: actions/checkout@v4
        with:
          repository: provide-io/pyvider-components
          path: pyvider-components
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📥 Checkout plating
        uses: actions/checkout@v4
        with:
          repository: provide-io/plating
          path: plating
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Install UV
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: 📚 Install plating
        run: |
          cd plating
          uv pip install -e .
      
      - name: 📝 Generate Documentation
        run: |
          cd terraform-provider-pyvider
          ./scripts/build-docs.sh
      
      - name: 📤 Upload Documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: terraform-provider-pyvider/docs
          retention-days: 7
  
  build:
    name: 📦 Build Provider Binary
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: amd64
            target: linux_amd64
          - os: ubuntu-24.04-arm
            platform: linux
            arch: arm64
            target: linux_arm64
          - os: macos-latest
            platform: darwin
            arch: arm64
            target: darwin_arm64
          - os: macos-13  # Intel Mac
            platform: darwin
            arch: amd64
            target: darwin_amd64
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: 📥 Checkout provide-foundation
        uses: actions/checkout@v4
        with:
          repository: provide-io/provide-foundation
          path: ../provide-foundation
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📥 Checkout pyvider-components
        uses: actions/checkout@v4
        with:
          repository: provide-io/pyvider-components
          path: ../pyvider-components
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📥 Checkout plating
        uses: actions/checkout@v4
        with:
          repository: provide-io/plating
          path: ../plating
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 📦 Install UV
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      
      - name: 🔧 Install dependencies
        run: |
          # Install local workspace packages first
          cd ..
          uv pip install -e 'provide-foundation[all]'
          uv pip install -e pyvider-components
          uv pip install -e plating
          cd terraform-provider-pyvider
          uv tool install flavorpack
      
      - name: 🔑 Generate temporary signing keys
        run: |
          # Generate Ed25519 keys using flavor keygen
          flavor keygen --out-dir keys
          echo "✅ Generated temporary signing keys"
          ls -la keys/
      
      - name: 🏗️ Build PSP package
        run: |
          # Convert version to PEP 440 format for Python packaging
          PEP_VERSION="${{ inputs.version }}"
          if [[ "$PEP_VERSION" == *"-"* ]]; then
            BASE_VERSION=$(echo "$PEP_VERSION" | cut -d'-' -f1)
            POST_VERSION=$(echo "$PEP_VERSION" | cut -d'-' -f2)
            PEP_VERSION="${BASE_VERSION}.post${POST_VERSION}"
          fi
          
          # Update version in pyproject.toml
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' "s/version = \"[^\"]*\"/version = \"${PEP_VERSION}\"/" pyproject.toml
          else
            sed -i "s/version = \"[^\"]*\"/version = \"${PEP_VERSION}\"/" pyproject.toml
          fi
          
          # Build the PSP package
          # Note: flavorpack >= 0.0.5 automatically uses manylinux2014 wheels on Linux
          flavor pack \
            --manifest pyproject.toml \
            --output "terraform-provider-pyvider.psp"
          
          echo "✅ Built PSP package:"
          ls -la terraform-provider-pyvider.psp
      
      - name: 📦 Package for Terraform
        run: |
          # Rename PSP to Terraform provider binary format
          BINARY_NAME="terraform-provider-pyvider_v${{ inputs.version }}"
          cp terraform-provider-pyvider.psp "$BINARY_NAME"
          chmod +x "$BINARY_NAME"
          
          # Test execution with timing and launch-context
          echo "🧪 Testing provider binary execution..."
          echo "First run (cold start):"
          time ./"$BINARY_NAME" launch-context || true
          
          echo -e "\nSecond run (warm start):"
          time ./"$BINARY_NAME" launch-context || true
          
          # Create zip archive with proper naming
          ZIP_NAME="terraform-provider-pyvider_${{ inputs.version }}_${{ matrix.target }}.zip"
          zip "$ZIP_NAME" "$BINARY_NAME"
          
          echo "📦 Created Terraform provider package:"
          ls -la "$ZIP_NAME"
          
          # Test unzip to verify
          unzip -l "$ZIP_NAME"
      
      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: provider-${{ matrix.target }}
          path: |
            terraform-provider-pyvider_${{ inputs.version }}_${{ matrix.target }}.zip
          retention-days: 7

  release:
    name: 🎉 Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: 📁 Organize release files
        run: |
          mkdir -p release
          
          # Move all zip files to release directory
          find artifacts -name "*.zip" -type f -exec mv {} release/ \;
          
          # Copy and rename manifest file
          cp terraform-registry-manifest.json "release/terraform-provider-pyvider_${{ inputs.version }}_manifest.json"
          
          echo "📦 Release files:"
          ls -la release/
      
      - name: 🔧 Generate checksums
        run: |
          cd release
          
          # Generate SHA256 checksums for all files
          sha256sum * > "terraform-provider-pyvider_${{ inputs.version }}_SHA256SUMS"
          
          echo "📝 Checksums:"
          cat "terraform-provider-pyvider_${{ inputs.version }}_SHA256SUMS"
      
      - name: 🔐 Sign checksums with GPG
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          chmod +x .github/scripts/sign-release.sh
          .github/scripts/sign-release.sh release/
          
          echo "✅ Signatures created:"
          ls -la release/*.sig
      
      - name: 🔍 Verify release artifacts
        run: |
          cd release
          echo "📋 Verifying release artifacts for Terraform Registry..."
          
          # Check all required files exist
          REQUIRED_FILES=(
            "terraform-provider-pyvider_${{ inputs.version }}_linux_amd64.zip"
            "terraform-provider-pyvider_${{ inputs.version }}_linux_arm64.zip"
            "terraform-provider-pyvider_${{ inputs.version }}_darwin_amd64.zip"
            "terraform-provider-pyvider_${{ inputs.version }}_darwin_arm64.zip"
            "terraform-provider-pyvider_${{ inputs.version }}_manifest.json"
            "terraform-provider-pyvider_${{ inputs.version }}_SHA256SUMS"
            "terraform-provider-pyvider_${{ inputs.version }}_SHA256SUMS.sig"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              exit 1
            else
              echo "✅ Found: $file"
            fi
          done
          
          # Verify SHA256SUMS contains all required entries
          echo -e "\n📝 Checking SHA256SUMS entries..."
          for platform in linux_amd64 linux_arm64 darwin_amd64 darwin_arm64; do
            if grep -q "${platform}.zip" "terraform-provider-pyvider_${{ inputs.version }}_SHA256SUMS"; then
              echo "✅ SHA256SUMS contains ${platform}"
            else
              echo "❌ SHA256SUMS missing ${platform}"
              exit 1
            fi
          done
          
          # Verify manifest.json
          if grep -q "manifest.json" "terraform-provider-pyvider_${{ inputs.version }}_SHA256SUMS"; then
            echo "✅ SHA256SUMS contains manifest.json"
          else
            echo "❌ SHA256SUMS missing manifest.json"
            exit 1
          fi
          
          echo -e "\n✅ All release artifacts verified!"
      
      - name: 📝 Generate release notes
        run: |
          cat > release-notes.md << EOF
          # Terraform Provider Pyvider v${{ inputs.version }}
          
          ## 📦 Installation
          
          ### Terraform Registry (Coming Soon)
          \`\`\`hcl
          terraform {
            required_providers {
              pyvider = {
                source  = "provide-io/pyvider"
                version = "${{ inputs.version }}"
              }
            }
          }
          \`\`\`
          
          ### Manual Installation
          1. Download the appropriate package for your platform from the assets below
          2. Extract the archive to get the provider binary
          3. Place it in your Terraform plugins directory
          
          ## 🔒 Verification
          
          Verify your download with:
          \`\`\`bash
          # Download the SHA256SUMS and signature files
          curl -LO https://github.com/provide-io/terraform-provider-pyvider/releases/download/v${{ inputs.version }}/terraform-provider-pyvider_${{ inputs.version }}_SHA256SUMS
          curl -LO https://github.com/provide-io/terraform-provider-pyvider/releases/download/v${{ inputs.version }}/terraform-provider-pyvider_${{ inputs.version }}_SHA256SUMS.sig
          
          # Verify the signature
          gpg --verify terraform-provider-pyvider_${{ inputs.version }}_SHA256SUMS.sig terraform-provider-pyvider_${{ inputs.version }}_SHA256SUMS
          
          # Verify the checksum
          sha256sum -c terraform-provider-pyvider_${{ inputs.version }}_SHA256SUMS 2>&1 | grep OK
          \`\`\`
          
          ## 📋 Supported Platforms
          
          - Linux AMD64
          - Linux ARM64
          - macOS ARM64 (Apple Silicon)
          - macOS AMD64 (Intel)
          
          ## 🚀 What's New
          
          Built with Pyvider framework - Python-based Terraform provider development.
          EOF
      
      - name: 🏷️ Create Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create and push tag (ensure it exists before release)
          git tag -a "v${{ inputs.version }}" -m "Release v${{ inputs.version }}" || echo "Tag might already exist"
          git push origin "v${{ inputs.version }}" || echo "Tag already exists on remote"
      
      - name: 🚀 Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: "v${{ inputs.version }}"
          name: "v${{ inputs.version }}"
          bodyFile: "release-notes.md"
          artifacts: "release/*"
          prerelease: ${{ inputs.prerelease }}
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}